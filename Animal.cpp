/*********************************************************************
** Program Filename: Animal.cpp
** Author: Jason Chen
** Date: 02/19/2018
** Description: Implements functions declared by the Animal class and
 * in the Animal header.
** Input: None
** Output: None
*********************************************************************/
#include <iostream>
#include "Animal.h"

/*********************************************************************
** Function: Animal
** Description: Constructor for the abstract Animal class.
** Parameters: age is the age of the animal; cost is the unit cost of
 * the animal species; babies_per_birth is the number of babies the
 * animal's species creates in one birth; food_cost_multiplier is the
 * multiplier for the daily base food cost; revenue_pct is the percent
 * of the specie's unit cost the animal generates in revenue.
** Pre-Conditions: None
** Post-Conditions: None
*********************************************************************/
Animal::Animal(
    const std::string &name,
    unsigned age,
    unsigned cost,
    unsigned babies_per_birth,
    unsigned food_cost_multiplier,
    double revenue_pct):
    name_(name), age_(age), babies_per_birth_(babies_per_birth), cost_(cost),
    food_cost_multiplier_(food_cost_multiplier), revenue_pct_(revenue_pct) {}

/*********************************************************************
** Function: DailyRevenue
** Description: Calculates the daily revenue generated by the animal.
** Parameters: bonus_revenue is an optional amount of bonus revenue
 * generated by the animal.
** Pre-Conditions: None
** Post-Conditions: None
*********************************************************************/
double Animal::DailyRevenue(Option<unsigned> bonus_revenue) const {
  double revenue = revenue_pct_ * cost_;

  if (IsBaby())
    revenue *= 2;

  return revenue;
}

/*********************************************************************
** Function: FoodCost
** Description: Calculates the cost of feeding the animal.
** Parameters: t is the type of food being fed; base_cost is the base
 * cost of the food.
** Pre-Conditions: None
** Post-Conditions: None
*********************************************************************/
double Animal::FoodCost(FoodType t, double base_cost) const {
  double cost = food_cost_multiplier_ * base_cost;

  if (t == FoodType::Premium) cost *= 2;
  else if (t == FoodType::Cheap) cost /= 2;

  return cost;
}

/*********************************************************************
** Function: PrettyAge
** Description: Formats the age in a human-friendly way (e.g. instead
 * of displaying 1095 days, this function formats that as 3 years).
** Parameters: None
** Pre-Conditions: None
** Post-Conditions: None
*********************************************************************/
std::string Animal::PrettyAge() const {
  if (age_ < 365) return std::to_string(age_) + " days";
  if (age_ % 365 == 0) return std::to_string(age_ / 365) + " years";
  unsigned years = age_ / 365;
  unsigned days = age_ - (365 * years);
  return std::to_string(years) + " years and " + std::to_string(days) +" days";
}

/*********************************************************************
** Function: operator==
** Description: Overloads the equality operator for Animals.
** Parameters: lhs is the left operand; rhs is the right operand.
** Pre-Conditions: None
** Post-Conditions: None
*********************************************************************/
bool operator==(const Animal &lhs, const Animal &rhs) {
  return (lhs.name_ == rhs.name_) && (lhs.age_ == rhs.age_);
}
